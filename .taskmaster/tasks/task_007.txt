# Task ID: 7
# Title: Build GUI Application with Tauri
# Status: pending
# Dependencies: 1, 4, 5, 6
# Priority: medium
# Description: Create a native macOS GUI application using Tauri framework with an intuitive interface for managing MCP servers and configurations.
# Details:
Set up a Tauri application with the following components:

1. Project Setup:
```bash
# Install Tauri CLI
npm install -g @tauri-apps/cli

# Create new Tauri project
npx create-tauri-app mcp-control-lite

# Choose React or Vue for frontend
```

2. Main Application Window:
- Implement a main window with sidebar navigation and content area
- Create views for Servers, Applications, Settings, and Logs
- Implement native macOS design patterns and UI components

3. Server Management View:
```tsx
// React component example
function ServersView() {
  const [servers, setServers] = useState<MCPServerConfig[]>([]);
  const [selectedServer, setSelectedServer] = useState<string | null>(null);
  const [serverStatuses, setServerStatuses] = useState<Record<string, string>>({});
  
  useEffect(() => {
    // Load servers from backend
    invoke('get_server_configurations').then((result: any) => {
      setServers(result);
    });
    
    // Load server statuses
    invoke('get_all_server_statuses').then((result: any) => {
      setServerStatuses(result);
    });
    
    // Set up status polling
    const interval = setInterval(() => {
      invoke('get_all_server_statuses').then((result: any) => {
        setServerStatuses(result);
      });
    }, 5000);
    
    return () => clearInterval(interval);
  }, []);
  
  const handleServerToggle = async (serverId: string, enabled: boolean) => {
    await invoke('update_server_configuration', { 
      id: serverId, 
      changes: { enabled } 
    });
    
    // Refresh servers
    invoke('get_server_configurations').then((result: any) => {
      setServers(result);
    });
  };
  
  const handleServerStart = async (serverId: string) => {
    await invoke('start_server', { id: serverId });
    
    // Refresh statuses
    invoke('get_all_server_statuses').then((result: any) => {
      setServerStatuses(result);
    });
  };
  
  const handleServerStop = async (serverId: string) => {
    await invoke('stop_server', { id: serverId });
    
    // Refresh statuses
    invoke('get_all_server_statuses').then((result: any) => {
      setServerStatuses(result);
    });
  };
  
  return (
    <div className="servers-view">
      <div className="servers-list">
        {servers.map(server => (
          <div 
            key={server.id} 
            className={`server-item ${selectedServer === server.id ? 'selected' : ''}`}
            onClick={() => setSelectedServer(server.id)}
          >
            <div className="server-name">{server.name}</div>
            <div className={`server-status status-${serverStatuses[server.id] || 'unknown'}`}>
              {serverStatuses[server.id] || 'unknown'}
            </div>
            <div className="server-controls">
              <Switch 
                checked={server.enabled} 
                onChange={(checked) => handleServerToggle(server.id, checked)} 
              />
              {serverStatuses[server.id] === 'running' ? (
                <Button onClick={() => handleServerStop(server.id)}>Stop</Button>
              ) : (
                <Button onClick={() => handleServerStart(server.id)}>Start</Button>
              )}
            </div>
          </div>
        ))}
      </div>
      
      {selectedServer && (
        <ServerDetailView serverId={selectedServer} />
      )}
    </div>
  );
}
```

4. Application Configuration View:
- List detected applications
- Show sync status and last sync time
- Allow manual sync of configurations

5. Settings View:
- User preferences
- Backup/restore options
- Theme selection
- Startup options

6. Tauri Backend Integration:
```rust
// In src-tauri/src/main.rs
#[tauri::command]
fn get_server_configurations() -> Result<Vec<MCPServerConfig>, String> {
  // Call to core engine to get configurations
}

#[tauri::command]
fn update_server_configuration(id: String, changes: serde_json::Value) -> Result<(), String> {
  // Call to core engine to update configuration
}

#[tauri::command]
fn start_server(id: String) -> Result<(), String> {
  // Call to server manager to start server
}

#[tauri::command]
fn stop_server(id: String) -> Result<(), String> {
  // Call to server manager to stop server
}

#[tauri::command]
fn get_all_server_statuses() -> Result<HashMap<String, String>, String> {
  // Call to server manager to get statuses
}
```

7. System Tray Integration:
- Add macOS menu bar icon
- Create menu with quick actions
- Show server status indicators

8. Drag and Drop Support:
- Implement drag and drop for configuration files
- Allow reordering of servers in the list

# Test Strategy:
1. Unit tests for UI components
2. Integration tests for Tauri commands
3. End-to-end tests for key user flows
4. Visual regression tests for UI components
5. Accessibility testing
6. Performance testing for large numbers of servers
7. Test menu bar integration
8. Test drag and drop functionality
9. Test on different macOS versions (Monterey and newer)
10. Test on both Intel and Apple Silicon
